<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>&#8203;</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
        body {
            background: url("../Naranja.jpg") no-repeat center center fixed;
            background-size: cover;
            filter: saturate(1.5) contrast(1.2) brightness(1.1);
        }
        canvas {
            position: absolute;
            top: 0;
            left: 0;
            display: block;
            cursor: crosshair;
        }
        #trailCanvas {
            pointer-events: none;
        }
    </style>
    <link
        rel="icon"
        type="image/svg+xml"
        href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64'><circle cx='32' cy='32' r='32' fill='%23FF6E05'/></svg>"
    >
</head>
<body>
    <canvas id="trailCanvas"></canvas>
    <canvas id="canvas"></canvas>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const trailCanvas = document.getElementById('trailCanvas');
        const trailCtx = trailCanvas.getContext('2d');

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            trailCanvas.width = window.innerWidth;
            trailCanvas.height = window.innerHeight;
            trailCtx.clearRect(0, 0, trailCanvas.width, trailCanvas.height);
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        // Array de tonos naranjas
        const orangeShades = [
            '#FF1104', '#FE5303', '#FF6E05', '#FF4603',
            '#FFD302', '#FF3E03', '#FF7A03', '#FEA104',
        ];

        class Ball {
            constructor(x, y, radius, color) {
                this.x = x !== undefined ? x : Math.random() * (canvas.width - 40) + 20;
                this.y = y !== undefined ? y : Math.random() * (canvas.height - 40) + 20;
                this.radius = radius || (Math.random() * 15 + 10);
                this.color = color || orangeShades[Math.floor(Math.random() * orangeShades.length)];
                this.vx = (Math.random() - 0.5) * 32 + 8;
                this.vy = (Math.random() - 0.5) * 32 + 8;
                this.mass = this.radius * 0.1;
                this.bounce = 0.8;
                this.alive = true;
            }

            update() {
                if (!this.alive) return;

                if (Math.abs(this.vx) < 0.5) this.vx += (Math.random() - 0.5) * 0.2;
                if (Math.abs(this.vy) < 0.5) this.vy += (Math.random() - 0.5) * 0.2;

                this.x += this.vx;
                this.y += this.vy;

                // Rebotes con los bordes
                if (this.x - this.radius <= 0) {
                    this.x = this.radius;
                    this.vx = -this.vx * this.bounce;
                }
                if (this.x + this.radius >= canvas.width) {
                    this.x = canvas.width - this.radius;
                    this.vx = -this.vx * this.bounce;
                }
                if (this.y - this.radius <= 0) {
                    this.y = this.radius;
                    this.vy = -this.vy * this.bounce;
                }
                if (this.y + this.radius >= canvas.height) {
                    this.y = canvas.height - this.radius;
                    this.vy = -this.vy * this.bounce;
                }
            }

            draw() {
                if (!this.alive) return;

                // Dibuja el rastro semitransparente
                trailCtx.beginPath();
                trailCtx.arc(this.x, this.y, this.radius * 0.6, 0, Math.PI * 2);
                trailCtx.fillStyle = this.hexToRgba(this.color, 0.3);
                trailCtx.fill();
                trailCtx.closePath();

                // Dibuja la pelota principal con gradiente 3D y sombra
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                const gradient = ctx.createRadialGradient(
                    this.x - this.radius * 0.3,
                    this.y - this.radius * 0.3,
                    0,
                    this.x,
                    this.y,
                    this.radius
                );
                gradient.addColorStop(0, this.lightenColor(this.color, 40));
                gradient.addColorStop(1, this.color);
                ctx.fillStyle = gradient;
                ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
                ctx.shadowBlur = 5;
                ctx.shadowOffsetX = 2;
                ctx.shadowOffsetY = 2;
                ctx.fill();
                // Restablecemos sombras
                ctx.shadowColor = 'transparent';
                ctx.shadowBlur = 0;
                ctx.shadowOffsetX = 0;
                ctx.shadowOffsetY = 0;
                ctx.closePath();
            }

            hexToRgba(hex, alpha) {
                const r = parseInt(hex.slice(1, 3), 16);
                const g = parseInt(hex.slice(3, 5), 16);
                const b = parseInt(hex.slice(5, 7), 16);
                return `rgba(${r}, ${g}, ${b}, ${alpha})`;
            }

            lightenColor(color, percent) {
                const num = parseInt(color.replace("#", ""), 16);
                const amt = Math.round(2.55 * percent);
                const R = (num >> 16) + amt;
                const G = (num >> 8 & 0x00FF) + amt;
                const B = (num & 0x0000FF) + amt;
                return "#" + (0x1000000 +
                    (R < 255 ? (R < 1 ? 0 : R) : 255) * 0x10000 +
                    (G < 255 ? (G < 1 ? 0 : G) : 255) * 0x100 +
                    (B < 255 ? (B < 1 ? 0 : B) : 255)
                ).toString(16).slice(1);
            }
        }

        // Clase Explosion para manejar partículas de explosión (sin cambios)
        class Explosion {
            constructor(x, y) {
                this.particles = [];
                this.initParticles(x, y);
            }

            initParticles(cx, cy) {
                const numParticles = 20;
                for (let i = 0; i < numParticles; i++) {
                    const angle = Math.random() * Math.PI * 2;
                    const speed = Math.random() * 4 + 2;
                    const vx = Math.cos(angle) * speed;
                    const vy = Math.sin(angle) * speed;
                    const color = orangeShades[Math.floor(Math.random() * orangeShades.length)];
                    const radius = Math.random() * 4 + 2;
                    const life = Math.random() * 30 + 30;
                    this.particles.push({ x: cx, y: cy, vx, vy, color, radius, life });
                }
            }

            update() {
                this.particles.forEach(p => {
                    if (p.life > 0) {
                        p.life--;
                        p.x += p.vx;
                        p.y += p.vy;
                        p.radius *= 0.95;
                        p.vx *= 0.96;
                        p.vy *= 0.96;
                    }
                });
                this.particles = this.particles.filter(p => p.life > 0 && p.radius > 0.5);
            }

            draw() {
                this.particles.forEach(p => {
                    const alpha = p.life / 60;
                    ctx.beginPath();
                    ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
                    ctx.fillStyle = p.color.replace(/,[^\)]+\)/, `, ${alpha})`)
                                    .replace(/^#([0-9A-F]{6})$/i, (m, c) => {
                                        const r = parseInt(c.substr(0,2), 16);
                                        const g = parseInt(c.substr(2,2), 16);
                                        const b = parseInt(c.substr(4,2), 16);
                                        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
                                    });
                    ctx.fill();
                    ctx.closePath();
                });
            }

            isAlive() {
                return this.particles.length > 0;
            }
        }

        function isColliding(a, b) {
            const dx = a.x - b.x;
            const dy = a.y - b.y;
            const dist = Math.hypot(dx, dy);
            return dist < a.radius + b.radius;
        }

        let balls = [];
        let explosions = [];

        function initBalls(count = 15) {
            balls = [];
            for (let i = 0; i < count; i++) {
                balls.push(new Ball());
            }
        }
        function resetBalls() {
            initBalls(15);
        }

        canvas.addEventListener('click', e => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            balls.push(new Ball(x, y));
        });
        canvas.addEventListener('contextmenu', e => {
            e.preventDefault();
            resetBalls();
        });

        const MAX_BALLS = 100;

        setInterval(() => {
            // Eliminamos pelotas muertas (ya no usan life, sino alive)
            balls = balls.filter(b => b.alive);

            // Si excedemos MAX_BALLS, eliminamos las más antiguas
            if (balls.length >= MAX_BALLS) {
                while (balls.length >= MAX_BALLS) {
                    balls.shift();
                }
            }

            // Añadimos una bola nueva al azar
            const xAzar = Math.random() * canvas.width;
            const yAzar = Math.random() * canvas.height;
            balls.push(new Ball(xAzar, yAzar));
        }, 300);

        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Desvanecemos el rastro
            trailCtx.globalCompositeOperation = 'destination-out';
            trailCtx.fillStyle = 'rgba(0, 0, 0, 0.03)';
            trailCtx.fillRect(0, 0, trailCanvas.width, trailCanvas.height);
            trailCtx.globalCompositeOperation = 'source-over';

            // 1) Actualizamos todas las pelotas vivas
            balls.forEach(b => b.update());

            // 2) Detección de colisiones y creación de explosiones
            for (let i = 0; i < balls.length; i++) {
                for (let j = i + 1; j < balls.length; j++) {
                    const ballA = balls[i];
                    const ballB = balls[j];
                    if (ballA.alive && ballB.alive && isColliding(ballA, ballB)) {
                        const cx = (ballA.x + ballB.x) / 2;
                        const cy = (ballA.y + ballB.y) / 2;
                        explosions.push(new Explosion(cx, cy));
                        // “Matamos” ambas pelotas marcando alive = false
                        ballA.alive = false;
                        ballB.alive = false;
                    }
                }
            }

            // 3) Filtramos nuevamente las pelotas muertas
            balls = balls.filter(b => b.alive);

            // 4) Dibujamos las pelotas vivas
            balls.forEach(b => b.draw());

            // 5) Actualizamos y dibujamos explosiones
            explosions.forEach(exp => {
                exp.update();
                exp.draw();
            });
            // 6) Filtramos explosiones terminadas
            explosions = explosions.filter(exp => exp.isAlive());

            requestAnimationFrame(animate);
        }

        initBalls();
        animate();
    </script>
</body>
</html>
